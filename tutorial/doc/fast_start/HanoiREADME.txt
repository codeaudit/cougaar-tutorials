		Hanoi Node Fast Start Package

This package should contain everything you need to run the Towers of Hanoi single agent
example.  To run the example, do the following...

1) Unzip into a working directory.
	For NT, if the working directory is c:\opt, then the 'unzip will create  		
		c:\opt\cougaar\bin, c:\opt\cougaar\lib and c:\opt\cougaar\src
	For LINUX/UNIX, if the working directory is /opt, then the 'unzip' will create
 		/opt/cougaar/bin, /opt/cougaar/lib and /opt/cougaar/src

2) Open a terminal window (Command Prompt Window on NT, xterm on LINUX/UNIX)

3) In the terminal window, set the environment COUGAAR_INSTALL_PATH to the cougaar 
	directory, e.g. 
	for NT use:		set COUGAAR_INSTALL_PATH=c:\opt\cougaar
	for LINUX/UNIX use:	set COUGAAR_INSTALL_PATH=/opt/cougaar

4) In the terminal window, change directory to 'bin':
	cd c:\opt\cougaar\bin (on NT)
	cd /opt/cougaar/bin (on LINUX/UNIX)

5) In the terminal window, execute the Run script on the HanoiNode configuration file
	Run HanoiNode 
	** do not include the '.ini' on HanoiNode

You should see the node start up, then read the Hanoi agent configuration file, then load  
and initialize the domain plugins. When the agent enters the run state, one plugin will 
pose the 3 peg problem, another will see the problem and solve it, printing the
intermediate and final steps to the screen.  The agent will continue to run in the
window waiting for the next 'problem' to appear.  Hit Ctrl-C to stop the agent and shut 
down the node.

Users should look at the HanoiNode.ini config file.  This files simply says that the 
node manager should create one agent, and use the Hanoi.ini file to configure that 
agent.  The Hanoi.ini config file lists the domain plugins that should be loaded in the 
agent to give it the 'behaviors' desired.  In this case, we are giving it the 
behaviors necessary to post and solve the Towers of Hanoi problem.  Lets look more 
closely at the Hanoi.ini file...

------------------------Hanoi.ini--------------------------------------------------
class = org.cougaar.core.agent.ClusterImpl
** this is the template for the agent to be created

uic = Hanoi
** this is the 'Name' of the agent, usefull when multiple agents need to find each other

plugin = org.cougaar.tutorial.faststart.hanoi.HanoiInitPlugIn(3)
** this posts the problem to the blackboard.  The parameter 3 tells the plugin to 
** create a 3 disk problem.  For fun, try changing it to 4 or more and try running 
** it again.  The more disks, the more difficult the problem - which means more time 
** and more memory required to solve it.

plugin = org.cougaar.tutorial.faststart.hanoi.HanoiPlugIn
** This is the domain business processes that develops the strategy to solve the 
** problem by building a multi-step workflow plan.
** Think of this as the planner.

plugin = org.cougaar.tutorial.faststart.hanoi.HanoiMoverPlugIn
** This is the domain business process that actually moves a disk from one peg
** to another peg in accordance with the plan generated by the HanoiPlugIn
** Think of this as the worker.

plugin = org.cougaar.lib.planserver.PlanServerPlugIn
** This plugin loads a web server into your agent.  This will allow you to 
** drill into the live plan for the agent through your web browser.  Try it.
** use : http://localhost:5555/alpine/demo/TASKS.PSP
** Hit [Search]...drill around.  View the detailed log plan elements as XML.
** You can look at Assets, Tasks, PlanElements and UniqueObjects.
** Be sure to click on the tasks links and see them expanded in the frame on the left.

All the other configuration lines are empty or not important to this discussion.

A couple of interesting things...
You can use the web PSP to trace through the plan.  Its a little tedious, but you 
can follow the chain of the workflow from problem creation to the final solution.

The tasks are assigned ids in the plan, so you can uniquely follow the path of activities.
Be careful - objects are not necessarily numbered sequentially.  This is a
multi-threaded agent, and plugin operations may happen in different orders. For example, 
the plugin may build complex workflows before the specifying individual activities.  As 
with all multi-threaded and distributed apps - NEVER ASSUME EXCLUSIVE SEQUENTIAL EXECUTION 
of the business process.


The PSP mechanism allows you to easily define a DTD and web filter to customize the 
presentation of information.  So if this were a real problem, we could build a custom
PSP to show the steps of the answer as a well formatted table in a web page...

So what?

In this little, single agent example, you have run an agent containing multiple domain 
business rules (captured in plug-ins).  You have solved a simple problem by building a
plan (simple workflow) and then executing that plan.  You have also used a web page to 
interact with the web server in the agent to ask questions abouts it plan (viewing the 
agents part of the distributed blackboard).  

Again, So What?

Well - this approach is very flexible and based on component design.  Suppose you have a
new algorithm for solving this problem - you can now rewrite ONLY the HanoiPlugIn to 
implement your new algorithm - as long as the new code still uses the task directives
of MANAGE and TRANSPORT.  For this example, our language of communication are the 
the tasks MANAGE and TRANSPORT and the arguments (direct object, phrases, etc).  You 
will note the similarity to the structure of English sentences.  You may also notice the
use of the cognitive process model to solve this problem.  In this example, HanoiPlugIn
is the 'Expander', expanding the initial problem into workflows of subproblems and actions.
The HanoiMoverPlugIn is the 'Allocator' that assigns movement activities to itself 
and performs them.  In this example, we have not instantiated any 'Assessor' plugins.
(For more information on this concept, please consult the PlugIn Developers Guide)

Now you may want to move on to the next example...and see more of the power and 
flexibility of the cougaar approach...