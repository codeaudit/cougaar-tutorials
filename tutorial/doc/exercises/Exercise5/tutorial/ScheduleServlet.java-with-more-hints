package tutorial;

import java.io.*;
import java.util.*;
import java.text.SimpleDateFormat;
import javax.servlet.*;
import javax.servlet.http.*;
import org.cougaar.core.servlet.*;

import tutorial.assets.*;
import org.cougaar.util.UnaryPredicate;
import org.cougaar.core.agent.*;
import org.cougaar.glm.ldm.asset.*;
import org.cougaar.planning.ldm.asset.*;
import org.cougaar.core.blackboard.Subscription;
import org.cougaar.planning.ldm.plan.NewTask;
import org.cougaar.planning.ldm.plan.TaskImpl;
import org.cougaar.planning.ldm.plan.Task;
import org.cougaar.planning.ldm.PlanningFactory;
import org.cougaar.core.blackboard.IncrementalSubscription;
import org.cougaar.core.servlet.SimpleServletComponent;



  /**
   * todo:  Create Predicate matching all ProgrammerAssets
   */
  // hint:  see UnaryPredicate interface
  // more hints:  class ProgrammersPredicate implements UnaryPredicate {
  // more hints:    public boolean execute(Object o) {
  // more hints:      return o instanceof ProgrammerAsset;
  // more hints:    }
  // more hints:  }


 // todo:  add code to make this a servlet subclass
 // hint:  parent class should be HttpServlet
 // more hints: public class ScheduleServlet extends HttpServlet
public class ScheduleServlet 
{
	private Properties properties = new Properties();
	private PrintWriter out;
	private SimpleServletSupport support;

	public void setSimpleServletSupport(SimpleServletSupport mySupport)
	{
		support = mySupport;
	}

	public void doGet(
	        HttpServletRequest request,
	        HttpServletResponse response) throws IOException, ServletException
	{
		execute(request, response);
	}
 
	public void doPost(
	        HttpServletRequest request,
	        HttpServletResponse response) throws IOException, ServletException
	{
		execute(request, response);
	}

	private void execute(
	        HttpServletRequest request,
	        HttpServletResponse response) throws IOException, ServletException
	{

		// todo:  get the PrintWriter which sends data to HTTP
		// hint:  get it from the HttpServletResponse
		// more hints:  out = response.getWriter();
	    try {
		System.out.println("ScheduleServlet called from agent: " + support.getEncodedAgentName());
		
		// todo: query the Blackboard for a Collection of ProgrammerAssets
		// hint: use the SimpleServletSupport object
		// more hints:  Collection programmers =  support.queryBlackboard(new ProgrammersPredicate());
		// more hints:  Iterator iter = programmers.iterator();
		// more hints:  while (iter.hasNext()) {
	        // more hints:    ProgrammerAsset pa = (ProgrammerAsset)iter.next();
	        // more hints:    dumpProgrammerSchedule(pa, out);
		// more hints:  }
           }	
		catch (Exception ex)
		{
			out.println(ex.getMessage());
			ex.printStackTrace(out);
			System.out.println(ex);
			out.flush();
		}

	}

  /**
   * Print an HTML table of this programmer's schedule to the PrintStream
   */
  private void dumpProgrammerSchedule(ProgrammerAsset pa, PrintWriter out) {

      // todo: print programmer's name and a line break
      // hint:  see Asset.getItemIdentificationPG
      // hint:  see ItemIdentificatioinPG.getItemIdentification()
      // more hints:  out.println("<b>Programmer: "+pa.getItemIdentificationPG().getItemIdentification()+"<b><br>");
      out.println("<table border=1>");
      RoleSchedule s = pa.getRoleSchedule();
      Enumeration iter = s.getAllScheduleElements();

      out.println("<tr><td><b>Month</b></td><td><b>Task</b></td></tr>");
      while (iter.hasMoreElements()) {
        Object o = iter.nextElement();
        if (o instanceof Allocation) {
          Allocation alloc = (Allocation) o;
          SimpleDateFormat sdf = new SimpleDateFormat ("MMM");
          // todo: print the months, verb and items to be coded, all
          //       formatted in a table
          // hint:  see Alloc.getStartDate
          // hint:  see Alloc.getEndTime
          // hint:  see Task.getVerb
          // hint:  see Task.getDirectObject
          // hint:  see Asset.getItemIdentificationPG()
          // hint:  see IdentificationPG.getIdentification()
          // more hints:
          //      out.print ("<tr><td>" + sdf.format (alloc.getStartDate()) +
          //      "-" + sdf.format (new Date (alloc.getEndTime() - 1)) +
          //      "</td><td>" + alloc.getTask().getVerb() + " " +
          //      alloc.getTask().getDirectObject().
          //        getItemIdentificationPG().getItemIdentification() +
          //      "</td></tr>");

        }
      }
      out.println("</table>");
      out.flush();
  }

}


