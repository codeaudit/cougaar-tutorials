/*
 * <copyright>
 * Copyright 1997-2001 Defense Advanced Research Projects
 * Agency (DARPA) and ALPINE (a BBN Technologies (BBN) and
 * Raytheon Systems Company (RSC) Consortium).
 * This software to be used only in accordance with the
 * COUGAAR licence agreement.
 * </copyright>
 */
package tutorial;

import org.cougaar.core.plugin.SimplePlugIn;
import org.cougaar.core.cluster.IncrementalSubscription;
import java.util.*;
import org.cougaar.util.UnaryPredicate;
import org.cougaar.domain.planning.ldm.plan.*;
import org.cougaar.domain.planning.ldm.asset.*;
import tutorial.assets.*;

/**
 * todo: Create a predicate that matches all ProgrammerAssets
 */
// hint:  Create a class implementing the UnaryPredicate interface.
// hint:  Make the class' execute function return true for all ProgrammerAsset objects
// more hints:  class myProgrammersPredicate implements UnaryPredicate{
// more hints:    public boolean execute(Object o) {
// more hints:      return o instanceof ProgrammerAsset;
// more hints:    }
// more hints:  }

/**
 * todo: Create a predicate that matches all "CODE" tasks
 */
// hint:  Create a class implementing the UnaryPredicate interface.
// hint:  Make the class' execute function return true for all "CODE" tasks
// hint:  see Task.getVerb()

// more hints:  class myTaskPredicate implements UnaryPredicate{
// more hints:    public boolean execute(Object o) {
// more hints:      boolean ret = false;
// more hints:      if (o instanceof Task) {
// more hints:        Task t = (Task)o;
// more hints:        ret = t.getVerb().equals(Verb.getVerb("CODE"));
// more hints:      }
// more hints:      return ret;
// more hints:    }
// more hints:  }

/**
 * This COUGAAR PlugIn allocates tasks of verb "CODE"
 * to ProgrammerAssets
 * @author ALPINE (alpine-software@bbn.com)
 * @version $Id: ManagerAllocatorPlugIn.java-with-more-hints,v 1.5 2001-04-05 19:28:39 mthome Exp $
 **/
// todo:  Make ManagerAllocatorPlugIn a subclass
// hint:  see SimplePlugIn (parent class)
// more hints:  public class ManagerAllocatorPlugIn extends SimplePlugIn {

  private IncrementalSubscription tasks;         // "CODE" tasks
  private IncrementalSubscription programmers;   // Programmers

  /**
   * Subscribe to tasks and programming assets
   */
protected void setupSubscriptions() {
  // todo:  subscribe to CODE tasks
  // hint: see subscribe & see the predicate classes above
  // more hints:  tasks = (IncrementalSubscription)subscribe(new myTaskPredicate());

  // todo:  subscribe to ProgrammerAssets
  // hint: see subscribe & see the predicate classes above
  // more hints:  programmers = (IncrementalSubscription)subscribe(new myProgrammersPredicate());
}


  /**
   * Top level plugin execute loop.
   * todo:  Allocate CODE tasks to programmers
   */

  /*
  Pseudo Code for one possible approach to the following execute() function:
  for each unallocated task
    pull an available programmer off of the programmers list
    if no programmer is available,
      do nothing.  I will execute() again when a new programmer is published
    else
      allocate the task to the programmer
  */

protected void execute () {

// more hints:     // process unallocated tasks
// more hints:     Enumeration task_enum = tasks.elements();
// more hints:     while (task_enum.hasMoreElements()) {
// more hints:       Task t = (Task)task_enum.nextElement();
// more hints:       if (t.getPlanElement() != null)
// more hints:         continue;
// more hints:       Asset programmer = (Asset)programmers.first();
// more hints:       if (programmer != null)  // if no programmer yet, give up for now
// more hints:         allocateTo(programmer, t);
// more hints:     }
}

/**
 * Allocate the task to the asset
 */
private void allocateTo(Asset asset, Task task) {

	  AllocationResult estAR = null;

    // todo:  Allocate the task to the asset (Note: estAR can remain null)
    // hint:  see createAllocation
	  // more hints:  Allocation allocation = theLDMF.createAllocation(
    // more hints:      task.getPlan(), task, asset, estAR, Role.ASSIGNED);

    // todo:  Put the allocation on the LogPlan
    // hint:  see publishAdd
    // more hints:  System.out.println("\nAllocating to programmer: "+
    // more hints:    asset.getItemIdentificationPG().getItemIdentification());
	  // more hints:  publishAdd(allocation);

}

}
